{
	"info": {
		"_postman_id": "e94a989c-d65d-4ef6-8e7d-d683f81c45f0",
		"name": "RESTful API",
		"description": "# üöÄ Get started here\n\nThis collection guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## üîñ **How to use this collection**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these request types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT and PATCH requests.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a variable called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ‚ÑπÔ∏è Resources\n\n[Building requests](https://learning.postman.com/docs/sending-requests/requests/)  \n[Authorizing requests](https://learning.postman.com/docs/sending-requests/authorization/)  \n[Using variables](https://learning.postman.com/docs/sending-requests/variables/)  \n[Managing environments](https://learning.postman.com/docs/sending-requests/managing-environments/)  \n[Writing scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38076401"
	},
	"item": [
		{
			"name": "Get order by Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/{{stage}}/orders/:orderId",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"{{stage}}",
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": [
				{
					"name": "Get order by Id example",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{stage}}/orders/:orderId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{stage}}",
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "429"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Date",
							"value": "Thu, 20 Feb 2025 08:45:20 GMT"
						},
						{
							"key": "X-Amzn-Trace-Id",
							"value": "Root=1-67b6eb9f-2e894c23006e01e366a6cd9f;Parent=3f51140ffabe1522;Sampled=0;Lineage=1:70f56544:0"
						},
						{
							"key": "x-amzn-RequestId",
							"value": "af7418b9-0e62-48dd-b7b8-f9d707197da2"
						},
						{
							"key": "x-amz-apigw-id",
							"value": "GRnA8HcQoAMEoxg="
						},
						{
							"key": "X-Cache",
							"value": "Miss from cloudfront"
						},
						{
							"key": "Via",
							"value": "1.1 d4376d96b79614feeac8f5aedbf6618e.cloudfront.net (CloudFront)"
						},
						{
							"key": "X-Amz-Cf-Pop",
							"value": "GRU3-P3"
						},
						{
							"key": "X-Amz-Cf-Id",
							"value": "72oWfy272gJ6pxhvTnfeNniKTC3zd1LygRqFZcd3mnKJzUzPWqwNPA=="
						}
					],
					"cookie": [],
					"body": "{\n    \"totalPrice\": 60,\n    \"products\": [\n        {\n            \"name\": \"Pizza Calabresa\",\n            \"quantity\": 2,\n            \"productId\": \"4629e686-970e-41c7-949a-5bdb0c985155 \",\n            \"price\": 25\n        },\n        {\n            \"name\": \"Coca-Cola 350ml\",\n            \"quantity\": 2,\n            \"productId\": \"944233e2-3f1a-4c13-81e3-ac713e4b0476\",\n            \"price\": 5\n        }\n    ],\n    \"orderId\": \"c12cc5d5-20e5-412e-8616-05848192d955\",\n    \"userId\": \"68d8672f-e1c0-4241-b45c-8ffaac1f3e60\",\n    \"updatedAt\": \"2025-02-20T08:44:57.000Z\",\n    \"status\": \"RECEIVED\",\n    \"createdAt\": \"2025-02-20T08:44:57.000Z\"\n}"
				}
			]
		},
		{
			"name": "Get user's orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/{{stage}}/users/:userId/orders",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"{{stage}}",
						"users",
						":userId",
						"orders"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": [
				{
					"name": "Get user's orders example",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{stage}}/users/:userId/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{stage}}",
								"users",
								":userId",
								"orders"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "431"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Date",
							"value": "Thu, 20 Feb 2025 08:46:52 GMT"
						},
						{
							"key": "X-Amzn-Trace-Id",
							"value": "Root=1-67b6ebfb-7d7c0931694820070d05569f;Parent=454469ccd705aa0e;Sampled=0;Lineage=1:cfd1b5d1:0"
						},
						{
							"key": "x-amzn-RequestId",
							"value": "30a24994-49c1-4709-942f-839a83678de6"
						},
						{
							"key": "x-amz-apigw-id",
							"value": "GRnPWFUloAMESIw="
						},
						{
							"key": "X-Cache",
							"value": "Miss from cloudfront"
						},
						{
							"key": "Via",
							"value": "1.1 1223fdba7e12210962498f19cd8ed6d8.cloudfront.net (CloudFront)"
						},
						{
							"key": "X-Amz-Cf-Pop",
							"value": "GRU3-P3"
						},
						{
							"key": "X-Amz-Cf-Id",
							"value": "-AfsaVSx8IHHwrp30TopTFr0kbBfyx-PeyUoF2kqzKmFMtc_KBASdw=="
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"totalPrice\": 60,\n        \"products\": [\n            {\n                \"name\": \"Pizza Calabresa\",\n                \"quantity\": 2,\n                \"productId\": \"4629e686-970e-41c7-949a-5bdb0c985155 \",\n                \"price\": 25\n            },\n            {\n                \"name\": \"Coca-Cola 350ml\",\n                \"quantity\": 2,\n                \"productId\": \"944233e2-3f1a-4c13-81e3-ac713e4b0476\",\n                \"price\": 5\n            }\n        ],\n        \"userId\": \"68d8672f-e1c0-4241-b45c-8ffaac1f3e60\",\n        \"updatedAt\": \"2025-02-20T08:44:57.000Z\",\n        \"orderId\": \"c12cc5d5-20e5-412e-8616-05848192d955\",\n        \"status\": \"RECEIVED\",\n        \"createdAt\": \"2025-02-20T08:44:57.000Z\"\n    }\n]"
				}
			]
		},
		{
			"name": "Create order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse response body",
							"let responseData = pm.response.json();",
							"",
							"// Check if orderId exists and save it as a collection variable",
							"if (responseData.orderId) {",
							"    pm.collectionVariables.set(\"orderId\", responseData.orderId);",
							"    console.log(\"Saved orderId:\", responseData.orderId);",
							"} else {",
							"    console.log(\"orderId not found in response\");",
							"}",
							"",
							"// Check and store userId",
							"if (responseData.userId) {",
							"    pm.collectionVariables.set(\"userId\", responseData.userId);",
							"    console.log(\"Saved userId:\", responseData.userId);",
							"} else {",
							"    console.log(\"userId not found in response\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"userId\": \"68d8672f-e1c0-4241-b45c-8ffaac1f3e60\",\n  \"products\": [\n    {\n      \"productId\": \"4629e686-970e-41c7-949a-5bdb0c985155 \",\n      \"name\": \"Pizza Calabresa\",\n      \"quantity\": 2,\n      \"price\": 25.0\n    },\n    {\n      \"productId\": \"944233e2-3f1a-4c13-81e3-ac713e4b0476\",\n      \"name\": \"Coca-Cola 350ml\",\n      \"quantity\": 2,\n      \"price\": 5.0\n    }\n  ],\n  \"status\": \"RECEIVED\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/{{stage}}/orders",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"{{stage}}",
						"orders"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": [
				{
					"name": "Create order Example",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"68d8672f-e1c0-4241-b45c-8ffaac1f3e60\",\n  \"products\": [\n    {\n      \"productId\": \"4629e686-970e-41c7-949a-5bdb0c985155 \",\n      \"name\": \"Pizza Calabresa\",\n      \"quantity\": 2,\n      \"price\": 25.0\n    },\n    {\n      \"productId\": \"944233e2-3f1a-4c13-81e3-ac713e4b0476\",\n      \"name\": \"Coca-Cola 350ml\",\n      \"quantity\": 2,\n      \"price\": 5.0\n    }\n  ],\n  \"status\": \"RECEIVED\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{stage}}/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{stage}}",
								"orders"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "content-type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "vary",
							"value": "origin"
						},
						{
							"key": "access-control-expose-headers",
							"value": "WWW-Authenticate,Server-Authorization"
						},
						{
							"key": "cache-control",
							"value": "no-cache"
						},
						{
							"key": "content-length",
							"value": "403"
						},
						{
							"key": "Date",
							"value": "Wed, 19 Feb 2025 08:10:45 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"userId\": \"68d8672f-e1c0-4241-b45c-8ffaac1f3e60\",\n    \"products\": [\n        {\n            \"productId\": \"4629e686-970e-41c7-949a-5bdb0c985155 \",\n            \"name\": \"Pizza Calabresa\",\n            \"quantity\": 2,\n            \"price\": 25\n        },\n        {\n            \"productId\": \"944233e2-3f1a-4c13-81e3-ac713e4b0476\",\n            \"name\": \"Coca-Cola 350ml\",\n            \"quantity\": 2,\n            \"price\": 5\n        }\n    ],\n    \"status\": \"RECEIVED\",\n    \"orderId\": \"61177238-c7dd-421e-b344-eb57d054c6ac\",\n    \"totalPrice\": 60,\n    \"createdAt\": 1739952645348,\n    \"updatedAt\": 1739952645348\n}"
				},
				{
					"name": "Invalid Status",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"68d8672f-e1c0-4241-b45c-8ffaac1f3e60\",\n  \"products\": [\n    {\n      \"productId\": \"4629e686-970e-41c7-949a-5bdb0c985155 \",\n      \"name\": \"Pizza Calabresa\",\n      \"quantity\": 2,\n      \"price\": 25.0\n    },\n    {\n      \"productId\": \"944233e2-3f1a-4c13-81e3-ac713e4b0476\",\n      \"name\": \"Coca-Cola 350ml\",\n      \"quantity\": 2,\n      \"price\": 5.0\n    }\n  ],\n  \"status\": \"INVALID_STATUS\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{stage}}/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{stage}}",
								"orders"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "184"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Date",
							"value": "Thu, 20 Feb 2025 08:47:24 GMT"
						},
						{
							"key": "X-Amzn-Trace-Id",
							"value": "Root=1-67b6ec1c-082b85c910ccb6ce21151014;Parent=6ac0c0857c95150a;Sampled=0;Lineage=1:f9fa0d8b:0"
						},
						{
							"key": "x-amzn-RequestId",
							"value": "027d538b-98f8-4dad-a124-986385da9aaf"
						},
						{
							"key": "x-amz-apigw-id",
							"value": "GRnUkE9CIAMELmA="
						},
						{
							"key": "X-Cache",
							"value": "Error from cloudfront"
						},
						{
							"key": "Via",
							"value": "1.1 1223fdba7e12210962498f19cd8ed6d8.cloudfront.net (CloudFront)"
						},
						{
							"key": "X-Amz-Cf-Pop",
							"value": "GRU3-P3"
						},
						{
							"key": "X-Amz-Cf-Id",
							"value": "IL5X6FhBlbxJWoN8xdO-CVihoEVSN6Gg_Sfk95RGasvnD4WCl4gmWg=="
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": {\n        \"_errors\": [],\n        \"status\": {\n            \"_errors\": [\n                \"Invalid enum value. Expected 'RECEIVED' | 'IN_PREPARATION' | 'OUT_FOR_DELIVERY' | 'DELIVERED' | 'CANCELLED', received 'INVALID_STATUS'\"\n            ]\n        }\n    }\n}"
				},
				{
					"name": "UserId not defined",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"products\": [\n    {\n      \"productId\": \"4629e686-970e-41c7-949a-5bdb0c985155 \",\n      \"name\": \"Pizza Calabresa\",\n      \"quantity\": 2,\n      \"price\": 25.0\n    },\n    {\n      \"productId\": \"944233e2-3f1a-4c13-81e3-ac713e4b0476\",\n      \"name\": \"Coca-Cola 350ml\",\n      \"quantity\": 2,\n      \"price\": 5.0\n    }\n  ],\n  \"status\": \"RECEIVED\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{stage}}/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{stage}}",
								"orders"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "58"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Date",
							"value": "Thu, 20 Feb 2025 08:48:13 GMT"
						},
						{
							"key": "X-Amzn-Trace-Id",
							"value": "Root=1-67b6ec4d-132000d5117e85214e110ab5;Parent=6b8b1a7a783f04ec;Sampled=0;Lineage=1:f9fa0d8b:0"
						},
						{
							"key": "x-amzn-RequestId",
							"value": "a57636fd-d23c-4b53-97e7-c982ca211c05"
						},
						{
							"key": "x-amz-apigw-id",
							"value": "GRncOEHOoAMED3Q="
						},
						{
							"key": "X-Cache",
							"value": "Error from cloudfront"
						},
						{
							"key": "Via",
							"value": "1.1 1223fdba7e12210962498f19cd8ed6d8.cloudfront.net (CloudFront)"
						},
						{
							"key": "X-Amz-Cf-Pop",
							"value": "GRU3-P3"
						},
						{
							"key": "X-Amz-Cf-Id",
							"value": "T8ECAsMCtfc1cBn6xLFoWRfsVXIFFhvBET6qX0wdtnImrI0bvfe9sg=="
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": {\n        \"_errors\": [],\n        \"userId\": {\n            \"_errors\": [\n                \"Required\"\n            ]\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "Update order status by  Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"status\": \"IN_PREPARATION\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/{{stage}}/orders/:orderId",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"{{stage}}",
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": [
				{
					"name": "Update order status by  Id Example",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"status\": \"IN_PREPARATION\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{stage}}/orders/:orderId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{stage}}",
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "content-type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "vary",
							"value": "origin"
						},
						{
							"key": "access-control-expose-headers",
							"value": "WWW-Authenticate,Server-Authorization"
						},
						{
							"key": "cache-control",
							"value": "no-cache"
						},
						{
							"key": "content-length",
							"value": "76"
						},
						{
							"key": "Date",
							"value": "Wed, 19 Feb 2025 08:15:07 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"message\": \"Status updated for Order: 61177238-c7dd-421e-b344-eb57d054c6ac\"\n}"
				}
			]
		},
		{
			"name": "Delete order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/{{stage}}/orders/:orderId",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"{{stage}}",
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": [
				{
					"name": "Delete order example",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{stage}}/orders/:orderId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{stage}}",
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "content-type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "vary",
							"value": "origin"
						},
						{
							"key": "access-control-expose-headers",
							"value": "WWW-Authenticate,Server-Authorization"
						},
						{
							"key": "cache-control",
							"value": "no-cache"
						},
						{
							"key": "content-length",
							"value": "40"
						},
						{
							"key": "Date",
							"value": "Wed, 19 Feb 2025 10:00:17 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"message\": \"Order deleted successfully\"\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "orderId",
			"value": "45c6358f-0ec6-47f7-bb3c-759de50b3b53",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "68d8672f-e1c0-4241-b45c-8ffaac1f3e60",
			"type": "string"
		}
	]
}